---
import {template} from '@/settings'
interface Props {
	title: string
	description: string
	image: string
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, image } = Astro.props
---

<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<link
	rel='icon'
	type='image/svg+xml'
	href='data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸŽ“</text></svg>'
/>
<meta name='generator' content={Astro.generator} />

<!-- Sitemap -->
<link rel="sitemap" href={`${template.base}/sitemap-index.xml`} />

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name='title' content={title} />
<meta name='description' content={description} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content='website' />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={new URL(image, Astro.url)} />

<!-- Theme selector scripts (force dark theme) -->
<script is:inline>
  // Force the site theme to the configured dark theme on load and after swaps.
  // If you prefer a hard-coded value, replace the string below (e.g. 'dark').
  const forcedTheme = 'dark';

  // Apply immediately to prevent flash
  document.documentElement.setAttribute('data-theme', forcedTheme);

  // Re-apply after Astro swaps (client navigation)
  document.addEventListener('astro:after-swap', () => {
    document.documentElement.setAttribute('data-theme', forcedTheme);
  });
</script>

<script>
  // Keep theme-change in place if you want controls to work (optional).
  import { themeChange } from 'theme-change'
  themeChange()

  // Re-initialize after Astro view transitions
  document.addEventListener('astro:after-swap', () => {
    themeChange(false); // false = don't persist to localStorage
  });
</script>

<script>
	import { themeChange } from 'theme-change'
	themeChange()

  // Re-initialize after Astro view transitions
  document.addEventListener('astro:after-swap', () => {
    themeChange(false); // false = don't persist to localStorage
  });
</script>
